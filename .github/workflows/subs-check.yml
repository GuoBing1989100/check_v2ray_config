name: V2Ray Subscription Checker

on:
  schedule:
    - cron: '0 */8 * * *'
  workflow_dispatch:

jobs:
  check-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        
      - name: Verify configuration
        run: |
          echo "🔍 验证配置文件..."
          if [ ! -f "config/config.yaml" ]; then
            echo "❌ 错误：未找到配置文件 config/config.yaml"
            exit 1
          fi
          # 确保输出目录设置正确
          sed -i 's|output-dir:.*|output-dir: "/app/output"|' config/config.yaml
          echo "✅ 配置文件存在并已更新输出目录"
        
      - name: Setup environment
        run: |
          echo "🛠 准备环境..."
          mkdir -p output
          chmod -R 777 output
          chmod -R 777 config
          
      - name: Inspect Docker image
        run: |
          echo "🔎 检查 Docker 镜像结构..."
          # 查看镜像的入口点设置
          docker inspect --format='{{.Config.Entrypoint}}' ghcr.io/jackrun123/subs-check:latest
          
          # 查看镜像的命令设置
          docker inspect --format='{{.Config.Cmd}}' ghcr.io/jackrun123/subs-check:latest
          
          # 查看镜像的文件结构
          docker run --rm --entrypoint ls ghcr.io/jackrun123/subs-check:latest -l /app
          
      - name: Run subscription checker
        run: |
          echo "🚀 尝试运行订阅检查器..."
          
          # 尝试多种可能的入口点组合
          ENTRYPOINTS=(
            "/app/subs-check"
            "/app/main"
            "/app/check"
            "/app/cli"
            ""
          )
          
          for entry in "${ENTRYPOINTS[@]}"; do
            echo "尝试入口点: ${entry:-<默认>}"
            
            # 构建Docker命令
            cmd="docker run --rm \
              -v $PWD/config:/app/config \
              -v $PWD/output:/app/output"
            
            if [ -n "$entry" ]; then
              cmd+=" --entrypoint $entry"
            fi
            
            cmd+=" ghcr.io/jackrun123/subs-check:latest"
            
            if [ -n "$entry" ]; then
              cmd+=" -c /app/config/config.yaml"
            fi
            
            # 运行命令并捕获输出
            if $cmd 2>&1 | tee -a check.log; then
              echo "✅ 检查器运行成功!"
              break
            else
              echo "⚠ 尝试失败，错误代码: $?"
            fi
          done
          
          # 确保输出文件存在
          if [ ! -f output/all.txt ]; then
            echo "⚠ 警告: all.txt 未生成，创建空文件"
            touch output/all.txt
          fi
          
          echo "📊 输出文件行数: $(wc -l < output/all.txt)"
          
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: GuoBing1989100/v2ray_configs
          token: ${{ secrets.PAT_TOKEN }}
          path: target-repo
          
      - name: Push results to target repository
        run: |
          echo "📤 推送结果到目标仓库..."
          cp -v output/all.txt target-repo/all.txt
          
          cd target-repo
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add all.txt
          
          if git diff-index --quiet HEAD --; then
            echo "🟢 没有变更，跳过提交"
          else
            NODE_COUNT=$(wc -l < all.txt)
            TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S')
            git commit -m "自动更新节点列表 ($NODE_COUNT 个节点) $TIMESTAMP"
            git push
            echo "✅ 提交成功! 推送了 $NODE_COUNT 个节点"
          fi
          
      - name: Final verification
        run: |
          echo "🔎 最终验证"
          if [ -f target-repo/all.txt ]; then
            NODE_COUNT=$(wc -l < target-repo/all.txt)
            echo "📦 成功推送 $NODE_COUNT 个节点"
            echo "文件内容类型:"
            file target-repo/all.txt
          else
            echo "❌ 错误: all.txt 未找到"
          fi
